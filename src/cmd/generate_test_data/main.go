package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"log"
	"math/rand"
	"net/http"
	"time"

	"github.com/brianvoe/gofakeit/v7"
)

const (
	API_BASE_URL = "http://localhost:8080/api/v1"
	TOTAL_POSTS  = 100000
	MAX_USER_ID  = 10
)

// –®–∞–±–ª–æ–Ω—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
var postTemplates = []string{
	"–°–µ–≥–æ–¥–Ω—è –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –¥–µ–Ω—å! %s. –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç–ª–∏—á–Ω–æ–µ! üòä",
	"–¢–æ–ª—å–∫–æ —á—Ç–æ –ø–æ—Å–µ—Ç–∏–ª %s. –í–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ! –†–µ–∫–æ–º–µ–Ω–¥—É—é –≤—Å–µ–º.",
	"–ß–∏—Ç–∞—é –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∫–Ω–∏–≥—É –ø—Ä–æ %s. –ö—Ç–æ-–Ω–∏–±—É–¥—å –µ—â—ë —á–∏—Ç–∞–ª —á—Ç–æ-—Ç–æ –ø–æ–¥–æ–±–Ω–æ–µ?",
	"–ó–∞–≤—Ç—Ä–∞–∫–∞—é %s –∏ –¥—É–º–∞—é –æ –ø–ª–∞–Ω–∞—Ö –Ω–∞ –¥–µ–Ω—å. –ö—Å—Ç–∞—Ç–∏, –∫—Ç–æ —á—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ?",
	"–ü–æ—Å–º–æ—Ç—Ä–µ–ª —Ñ–∏–ª—å–º –ø—Ä–æ %s. –û—á–µ–Ω—å –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è! –ö—Ç–æ –µ—â—ë —Å–º–æ—Ç—Ä–µ–ª?",
	"–†–∞–±–æ—Ç–∞—é –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å %s. –û—á–µ–Ω—å —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ!",
	"–ì—É–ª—è—é –ø–æ –≥–æ—Ä–æ–¥—É –∏ –Ω–∞—Å–ª–∞–∂–¥–∞—é—Å—å %s. –ö—Ä–∞—Å–æ—Ç–∞ –∫—Ä—É–≥–æ–º!",
	"–£—á—É—Å—å –Ω–æ–≤–æ–º—É –Ω–∞–≤—ã–∫—É - %s. –û–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è, —ç—Ç–æ –Ω–µ —Ç–∞–∫ —Å–ª–æ–∂–Ω–æ, –∫–∞–∫ –∫–∞–∑–∞–ª–æ—Å—å.",
	"–í—Å—Ç—Ä–µ—Ç–∏–ª—Å—è —Å –¥—Ä—É–∑—å—è–º–∏, –æ–±—Å—É–∂–¥–∞–ª–∏ %s. –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è!",
	"–ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª %s –ø–æ –Ω–æ–≤–æ–º—É —Ä–µ—Ü–µ–ø—Ç—É. –ü–æ–ª—É—á–∏–ª–æ—Å—å –≤–∫—É—Å–Ω–æ! –î–µ–ª—é—Å—å —Ä–µ—Ü–µ–ø—Ç–æ–º.",
	"–†–∞–∑–º—ã—à–ª—è—é –æ %s. –ñ–∏–∑–Ω—å –ø–æ–ª–Ω–∞ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤.",
	"–ü–ª–∞–Ω–∏—Ä—É—é –ø–æ–µ–∑–¥–∫—É –≤ %s. –ö—Ç–æ-–Ω–∏–±—É–¥—å –±—ã–ª —Ç–∞–º? –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–ø–µ—á–ª–µ–Ω–∏—è–º–∏!",
	"–°–µ–≥–æ–¥–Ω—è –∏–∑—É—á–∞–ª %s. –°—Ç–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –≤–æ–∫—Ä—É–≥!",
	"–°–ª—É—à–∞—é –º—É–∑—ã–∫—É –∏ –¥—É–º–∞—é –æ %s. –ú—É–∑—ã–∫–∞ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç –Ω–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è.",
	"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ—à–ª–∞ –æ—Ç–ª–∏—á–Ω–æ! –û—Å–æ–±–µ–Ω–Ω–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å %s.",
	"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É—é %s. –ü–æ–ª—É—á–∞—é—Ç—Å—è –∫—Ä–∞—Å–∏–≤—ã–µ –∫–∞–¥—Ä—ã!",
	"–ò–∑—É—á–∞—é –∏—Å—Ç–æ—Ä–∏—é %s. –°—Ç–æ–ª—å–∫–æ fascinating —Ñ–∞–∫—Ç–æ–≤!",
	"–ì–æ—Ç–æ–≤–ª—é—Å—å –∫ –≤–∞–∂–Ω–æ–π –≤—Å—Ç—Ä–µ—á–µ –ø–æ –ø–æ–≤–æ–¥—É %s. –í–æ–ª–Ω—É—é—Å—å, –Ω–æ —É–≤–µ—Ä–µ–Ω –≤ —É—Å–ø–µ—Ö–µ.",
	"–ü–æ–º–æ–≥–∞—é –¥—Ä—É–≥—É —Å %s. –ü—Ä–∏—è—Ç–Ω–æ –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º!",
	"–û—Ç–∫—Ä—ã–ª –¥–ª—è —Å–µ–±—è –Ω–æ–≤–æ–µ —É–≤–ª–µ—á–µ–Ω–∏–µ - %s. –ö—Ç–æ –µ—â—ë —ç—Ç–∏–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è?",
}

var russianWords = []string{
	"–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–∫—É–ª–∏–Ω–∞—Ä–∏—è", "–º—É–∑—ã–∫–∞", "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è",
	"–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "—Å–ø–æ—Ä—Ç", "–ø—Ä–∏—Ä–æ–¥–∞", "–∏—Å–∫—É—Å—Å—Ç–≤–æ", "–Ω–∞—É–∫–∞",
	"—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "–∑–¥–æ—Ä–æ–≤—å–µ", "—Å–µ–º—å—è", "–¥—Ä—É–∂–±–∞",
	"–∫–∞—Ä—å–µ—Ä–∞", "—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ", "—Ö–æ–±–±–∏", "–º–µ–¥–∏—Ç–∞—Ü–∏—è", "–π–æ–≥–∞",
	"—Ä–∏—Å–æ–≤–∞–Ω–∏–µ", "—Ç–∞–Ω—Ü—ã", "—Ç–µ–∞—Ç—Ä", "–∫–∏–Ω–æ", "–¥–∏–∑–∞–π–Ω",
	"–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞", "—Å–∞–¥–æ–≤–æ–¥—Å—Ç–≤–æ", "—Ä—ã–±–∞–ª–∫–∞", "–≤–µ–ª–æ—Å–∏–ø–µ–¥", "–≥–æ—Ä—ã",
	"–º–æ—Ä–µ", "–ª–µ—Å", "–≥–æ—Ä–æ–¥", "–¥–µ—Ä–µ–≤–Ω—è", "–∑–∏–º–∞",
	"–≤–µ—Å–Ω–∞", "–ª–µ—Ç–æ", "–æ—Å–µ–Ω—å", "—Å–æ–ª–Ω—Ü–µ", "–¥–æ–∂–¥—å",
	"–∫–Ω–∏–≥–∏", "–∂—É—Ä–Ω–∞–ª—ã", "–Ω–æ–≤–æ—Å—Ç–∏", "–∏—Å—Ç–æ—Ä–∏—è", "—Ñ–∏–ª–æ—Å–æ—Ñ–∏—è",
	"–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è", "—Å–æ—Ü–∏–æ–ª–æ–≥–∏—è", "—ç–∫–æ–Ω–æ–º–∏–∫–∞", "–ø–æ–ª–∏—Ç–∏–∫–∞", "—ç–∫–æ–ª–æ–≥–∏—è",
}

var russianPlaces = []string{
	"–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫",
	"–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫", "–°–æ—á–∏", "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥", "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫", "–ë–∞–π–∫–∞–ª",
	"–≠—Ä–º–∏—Ç–∞–∂", "–¢—Ä–µ—Ç—å—è–∫–æ–≤—Å–∫–∞—è –≥–∞–ª–µ—Ä–µ—è", "–ö—Ä–µ–º–ª—å", "–ü–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ", "–í–î–ù–•",
	"–ü–µ—Ç–µ—Ä–≥–æ—Ñ", "–¶–∞—Ä—Å–∫–æ–µ –°–µ–ª–æ", "–ö–æ–ª–æ–º–µ–Ω—Å–∫–æ–µ", "–ö—É–∑—å–º–∏–Ω–∫–∏", "–°–æ–∫–æ–ª—å–Ω–∏–∫–∏",
	"—Ü–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞", "–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è", "–ø–∞—Ä–∫", "–º—É–∑–µ–π", "—Ç–µ–∞—Ç—Ä",
	"–±–∏–±–ª–∏–æ—Ç–µ–∫–∞", "–∫–∞—Ñ–µ", "—Ä–µ—Å—Ç–æ—Ä–∞–Ω", "–º–∞–≥–∞–∑–∏–Ω", "—Ä—ã–Ω–æ–∫",
	"—Å—Ç–∞–¥–∏–æ–Ω", "–±–∞—Å—Å–µ–π–Ω", "—Å–ø–æ—Ä—Ç–∑–∞–ª", "–∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä", "–≥–∞–ª–µ—Ä–µ—è",
}

var russianFood = []string{
	"–±–æ—Ä—â", "–ø–µ–ª—å–º–µ–Ω–∏", "–±–ª–∏–Ω—ã", "–∫–∞—à–∞", "—Å—É–ø",
	"—Å–∞–ª–∞—Ç", "–º—è—Å–æ", "—Ä—ã–±–∞", "–æ–≤–æ—â–∏", "—Ñ—Ä—É–∫—Ç—ã",
	"—Ö–ª–µ–±", "–º–æ–ª–æ–∫–æ", "—Å—ã—Ä", "—è–π—Ü–∞", "–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å",
	"–º–∞–∫–∞—Ä–æ–Ω—ã", "—Ä–∏—Å", "–≥—Ä–µ—á–∫–∞", "—á–∞–π", "–∫–æ—Ñ–µ",
	"–∫–æ–º–ø–æ—Ç", "—Å–æ–∫", "–≤–æ–¥–∞", "—Ç–æ—Ä—Ç", "–ø–∏—Ä–æ–≥",
	"–ø–µ—á–µ–Ω—å–µ", "–∫–æ–Ω—Ñ–µ—Ç—ã", "–º–æ—Ä–æ–∂–µ–Ω–æ–µ", "–π–æ–≥—É—Ä—Ç", "—Ç–≤–æ—Ä–æ–≥",
}

type FriendRequest struct {
	FriendID int64 `json:"friend_id"`
}

type PostRequest struct {
	Content string `json:"content"`
}

func main() {
	log.Println("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
	rand.Seed(time.Now().UnixNano())
	gofakeit.Seed(time.Now().UnixNano())

	// 1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥—Ä—É–∂–±—ã –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ 1-5
	log.Println("üìù –°–æ–∑–¥–∞—ë–º –¥—Ä—É–∂–±—ã –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ 1-5...")
	createFriendships()

	// 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 1-10
	log.Println("üì± –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 100,000 –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 1-10...")
	generatePosts()

	log.Println("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
}

func createFriendships() {
	// –°–æ–∑–¥–∞—ë–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥—Ä—É–∂–±—ã –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ 1-5
	for userID := 1; userID <= 5; userID++ {
		for friendID := userID + 1; friendID <= 5; friendID++ {
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É
			sendFriendRequest(int64(userID), int64(friendID))
			time.Sleep(10 * time.Millisecond) // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

			// –û–¥–æ–±—Ä—è–µ–º –¥—Ä—É–∂–±—É
			approveFriendRequest(int64(friendID), int64(userID))
			time.Sleep(10 * time.Millisecond)

			log.Printf("‚úì –î—Ä—É–∂–±–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d ‚Üî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d", userID, friendID)
		}
	}
}

func sendFriendRequest(userID, friendID int64) {
	url := fmt.Sprintf("%s/friends/add", API_BASE_URL)

	req := FriendRequest{FriendID: friendID}
	jsonData, _ := json.Marshal(req)

	httpReq, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonData))
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –¥—Ä—É–∂–±—ã: %v", err)
		return
	}

	httpReq.Header.Set("Content-Type", "application/json")
	httpReq.Header.Set("X-User-ID", fmt.Sprintf("%d", userID))

	client := &http.Client{Timeout: 10 * time.Second}
	resp, err := client.Do(httpReq)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥—Ä—É–∂–±—ã: %v", err)
		return
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK && resp.StatusCode != http.StatusCreated {
		log.Printf("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –¥—Ä—É–∂–±—ã: %d", resp.StatusCode)
	}
}

func approveFriendRequest(userID, requestorID int64) {
	url := fmt.Sprintf("%s/friends/approve", API_BASE_URL)

	req := FriendRequest{FriendID: requestorID}
	jsonData, _ := json.Marshal(req)

	httpReq, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonData))
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è: %v", err)
		return
	}

	httpReq.Header.Set("Content-Type", "application/json")
	httpReq.Header.Set("X-User-ID", fmt.Sprintf("%d", userID))

	client := &http.Client{Timeout: 10 * time.Second}
	resp, err := client.Do(httpReq)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –¥—Ä—É–∂–±—ã: %v", err)
		return
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		log.Printf("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –¥—Ä—É–∂–±—ã: %d", resp.StatusCode)
	}
}

func generatePosts() {
	successCount := 0
	errorCount := 0

	for i := 0; i < TOTAL_POSTS; i++ {
		// –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç 1 –¥–æ 10
		userID := rand.Intn(MAX_USER_ID) + 1

		// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç
		content := generatePostContent()

		if createPost(int64(userID), content) {
			successCount++
		} else {
			errorCount++
		}

		// –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 1000 –ø–æ—Å—Ç–æ–≤
		if (i+1)%1000 == 0 {
			log.Printf("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: %d/%d –ø–æ—Å—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ (—É—Å–ø–µ—à–Ω–æ: %d, –æ—à–∏–±–æ–∫: %d)",
				i+1, TOTAL_POSTS, successCount, errorCount)
		}

		// –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
		if i%100 == 0 {
			time.Sleep(10 * time.Millisecond)
		}
	}

	log.Printf("üìà –ò—Ç–æ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: %d —É—Å–ø–µ—à–Ω–æ, %d –æ—à–∏–±–æ–∫", successCount, errorCount)
}

func generatePostContent() string {
	// –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —à–∞–±–ª–æ–Ω
	template := postTemplates[rand.Intn(len(postTemplates))]

	// –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ —à–∞–±–ª–æ–Ω
	var word string
	switch rand.Intn(3) {
	case 0:
		word = russianWords[rand.Intn(len(russianWords))]
	case 1:
		word = russianPlaces[rand.Intn(len(russianPlaces))]
	case 2:
		word = russianFood[rand.Intn(len(russianFood))]
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –ø–æ—Å—Ç
	content := fmt.Sprintf(template, word)

	// –ò–Ω–æ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
	if rand.Float32() < 0.3 {
		additions := []string{
			" #–∂–∏–∑–Ω—å #–ø–æ–∑–∏—Ç–∏–≤",
			" üí≠ –ß—Ç–æ –¥—É–º–∞–µ—Ç–µ?",
			" –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –º–Ω–µ–Ω–∏–µ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö!",
			" üî• –ö—Ç–æ —Å–æ –º–Ω–æ–π —Å–æ–≥–ª–∞—Å–µ–Ω?",
			" ‚ú® –ú–∞–≥–∏—è –º–æ–º–µ–Ω—Ç–∞!",
			" üéØ –¶–µ–ª—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!",
			" üåü –ö–∞–∂–¥—ã–π –¥–µ–Ω—å - –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å!",
			" üìö –£—á–∏–º—Å—è –Ω–æ–≤–æ–º—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.",
			" ü§ù –í–º–µ—Å—Ç–µ –º—ã —Å–∏–ª—å–Ω–µ–µ!",
			" üí™ –ù–µ —Å–¥–∞–≤–∞–µ–º—Å—è!",
		}
		content += additions[rand.Intn(len(additions))]
	}

	return content
}

func createPost(userID int64, content string) bool {
	url := fmt.Sprintf("%s/posts/create", API_BASE_URL)

	req := PostRequest{Content: content}
	jsonData, _ := json.Marshal(req)

	httpReq, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonData))
	if err != nil {
		return false
	}

	httpReq.Header.Set("Content-Type", "application/json")
	httpReq.Header.Set("X-User-ID", fmt.Sprintf("%d", userID))

	client := &http.Client{Timeout: 30 * time.Second}
	resp, err := client.Do(httpReq)
	if err != nil {
		return false
	}
	defer resp.Body.Close()

	return resp.StatusCode == http.StatusCreated
}
