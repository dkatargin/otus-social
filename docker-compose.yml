services:
  postgres-master:
    image: postgres:17
    restart: unless-stopped
    ports:
      - "127.0.0.1:5433:5432"
    environment:
      - POSTGRES_DB=app_db
      - POSTGRES_USER=app_user
      - POSTGRES_PASSWORD=app_password
      - POSTGRES_REPLICATION_USER=replicator
      - POSTGRES_REPLICATION_PASSWORD=replicatorpass
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./etc/postgresql-master.conf.example:/etc/postgresql/postgresql.conf
      - ./etc/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./etc/schema.sql:/docker-entrypoint-initdb.d/00_init_schema.sql
      - ./scripts/setup-replication.sh:/docker-entrypoint-initdb.d/99_setup_replication.sh
    command: >
      postgres -c config_file=/etc/postgresql/postgresql.conf -c hba_file=/etc/postgresql/pg_hba.conf
    healthcheck:
      test: [ "CMD-SHELL", "PGPASSWORD=$$POSTGRES_PASSWORD pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -h localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - otus

  postgres-slave-1:
    image: postgres:17
    restart: unless-stopped
    ports:
      - "127.0.0.1:5434:5432"
    environment:
      - POSTGRES_DB=app_db
      - POSTGRES_USER=app_user
      - POSTGRES_PASSWORD=app_password
      - POSTGRES_MASTER_HOST=postgres-master
      - POSTGRES_MASTER_PORT=5432
      - POSTGRES_MASTER_USER=replicator
      - POSTGRES_MASTER_PASSWORD=replicatorpass
    volumes:
      - db-data-slave-1:/var/lib/postgresql/data

    command: >
      bash -c "
      if [ ! -f /var/lib/postgresql/data/PG_VERSION ]; then
        echo 'Initializing replica1...'
        pg_basebackup -h postgres-master -D /var/lib/postgresql/data -U replicator -v -P -W
        echo 'standby_mode = on' >> /var/lib/postgresql/data/recovery.conf
        echo 'primary_conninfo = ''host=postgres-master port=5432 user=replicator password=replicatorpass''' >> /var/lib/postgresql/data/recovery.conf
        echo 'trigger_file = ''/tmp/promote_replica1''' >> /var/lib/postgresql/data/recovery.conf
      fi
      postgres
      "

    healthcheck:
      test: [ "CMD-SHELL", "PGPASSWORD=$$POSTGRES_PASSWORD pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -h localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      postgres-master:
        condition: service_healthy
    networks:
      - otus

  backend:
    build:
      context: ./src
      dockerfile: Dockerfile
    develop:
      watch:
        - action: rebuild
          path: ./src
          target: /build
        - action: sync+restart
          path: app.yaml
          target: /app/config.yaml
    environment:
      - GIN_MODE=release
    volumes:
      - ./app.yaml:/app/config.yaml
    ports:
      - "8080:8080"
    depends_on:
      postgres-master:
        condition: service_healthy
      postgres-slave-1:
        condition: service_healthy
    networks:
      - otus

networks:
  otus:
    driver: bridge

volumes:
  db-data:
  db-data-slave-1:
