services:
  postgres-master:
    image: postgres:17
    restart: unless-stopped
    ports:
      - "127.0.0.1:5433:5432"
    environment:
      - POSTGRES_DB=app_db
      - POSTGRES_USER=app_user
      - POSTGRES_PASSWORD=app_password
    volumes:
      - ./db:/var/lib/postgresql/data
      - ./etc/postgresql-master-simple.conf:/etc/postgresql/postgresql.conf:ro
      - ./etc/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - ./etc/schema.sql:/docker-entrypoint-initdb.d/00_init_schema.sql
      - ./scripts/setup-replication.sh:/docker-entrypoint-initdb.d/99_setup_replication.sh
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf", "-c", "hba_file=/etc/postgresql/pg_hba.conf"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app_user -d app_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - otus

  postgres-slave-1:
    image: postgres:17
    restart: unless-stopped
    ports:
      - "127.0.0.1:5434:5432"
    environment:
      - POSTGRES_DB=app_db
      - POSTGRES_USER=app_user
      - POSTGRES_PASSWORD=app_password
    volumes:
      - db-data-slave-1:/var/lib/postgresql/data
    command: |
      bash -c "
      if [ ! -f /var/lib/postgresql/data/postgresql.conf ]; then
        echo 'Initializing replica1...'
        rm -rf /var/lib/postgresql/data/* 2>/dev/null || true
        
        PGPASSWORD=replicatorpass pg_basebackup -h postgres-master -D /var/lib/postgresql/data -U replicator -v -P -R
        echo 'application_name = replica1' >> /var/lib/postgresql/data/postgresql.auto.conf
        
        chown -R postgres:postgres /var/lib/postgresql/data
        chmod 700 /var/lib/postgresql/data
      fi
      
      exec docker-entrypoint.sh postgres
      "
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app_user -d app_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    depends_on:
      postgres-master:
        condition: service_healthy
    networks:
      - otus

  postgres-slave-2:
    image: postgres:17
    restart: unless-stopped
    ports:
      - "127.0.0.1:5435:5432"
    environment:
      - POSTGRES_DB=app_db
      - POSTGRES_USER=app_user
      - POSTGRES_PASSWORD=app_password
    volumes:
      - db-data-slave-2:/var/lib/postgresql/data
    command: |
      bash -c "
      if [ ! -f /var/lib/postgresql/data/postgresql.conf ]; then
        echo 'Initializing replica2...'
        rm -rf /var/lib/postgresql/data/* 2>/dev/null || true
        
        PGPASSWORD=replicatorpass pg_basebackup -h postgres-master -D /var/lib/postgresql/data -U replicator -v -P -R
        echo 'application_name = replica2' >> /var/lib/postgresql/data/postgresql.auto.conf
        
        chown -R postgres:postgres /var/lib/postgresql/data
        chmod 700 /var/lib/postgresql/data
      fi
      
      exec docker-entrypoint.sh postgres
      "
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app_user -d app_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    depends_on:
      postgres-master:
        condition: service_healthy
    networks:
      - otus

  # HAProxy для балансировки PostgreSQL
  haproxy:
    image: haproxy:2.9-alpine
    restart: unless-stopped
    ports:
      - "127.0.0.1:5432:5432"    # Master для записи
      - "127.0.0.1:5436:5433"    # Replicas для чтения
      - "127.0.0.1:8404:8404"    # HAProxy stats
    volumes:
      - ./etc/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    depends_on:
      postgres-master:
        condition: service_healthy
      postgres-slave-1:
        condition: service_healthy
      postgres-slave-2:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "sh", "-c", "/bin/true"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - otus

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - otus

  redis-dialogs:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "127.0.0.1:6380:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-dialogs-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - otus

  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./etc/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - otus

  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "127.0.0.1:3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=
      - GF_SERVER_ROOT_URL=http://localhost:3000
    volumes:
      - grafana-data:/var/lib/grafana
      - ./etc/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./etc/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - otus

  zabbix-postgres:
    image: postgres:17-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_DB=zabbix
      - POSTGRES_USER=zabbix
      - POSTGRES_PASSWORD=zabbix_password
    volumes:
      - zabbix-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U zabbix -d zabbix"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - otus

  zabbix-server:
    image: zabbix/zabbix-server-pgsql:alpine-7.2-latest
    restart: unless-stopped
    ports:
      - "127.0.0.1:10051:10051"
    environment:
      - DB_SERVER_HOST=zabbix-postgres
      - POSTGRES_DB=zabbix
      - POSTGRES_USER=zabbix
      - POSTGRES_PASSWORD=zabbix_password
      - ZBX_ENABLE_SNMP_TRAPS=false
    volumes:
      - zabbix-server-data:/var/lib/zabbix
    depends_on:
      zabbix-postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "zabbix_server", "-R", "config_cache_reload"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - otus

  zabbix-web:
    image: zabbix/zabbix-web-nginx-pgsql:alpine-7.2-latest
    restart: unless-stopped
    ports:
      - "127.0.0.1:8081:8080"
    environment:
      - DB_SERVER_HOST=zabbix-postgres
      - POSTGRES_DB=zabbix
      - POSTGRES_USER=zabbix
      - POSTGRES_PASSWORD=zabbix_password
      - ZBX_SERVER_HOST=zabbix-server
      - PHP_TZ=Europe/Moscow
    depends_on:
      zabbix-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - otus

  rabbitmq:
    image: rabbitmq:3-management
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - otus

  # Backend service - инстанс 1
  backend-1:
    build:
      context: ./src
      dockerfile: Dockerfile
    environment:
      - GIN_MODE=release
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
    volumes:
      - ./app.yaml:/app/config.yaml
    depends_on:
      haproxy:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - otus

  # Backend service - инстанс 2
  backend-2:
    build:
      context: ./src
      dockerfile: Dockerfile
    environment:
      - GIN_MODE=release
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
    volumes:
      - ./app.yaml:/app/config.yaml
    depends_on:
      haproxy:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - otus

  # Backend service - инстанс 3
  backend-3:
    build:
      context: ./src
      dockerfile: Dockerfile
    environment:
      - GIN_MODE=release
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
    volumes:
      - ./app.yaml:/app/config.yaml
    depends_on:
      haproxy:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - otus

  # Dialogs service - инстанс 1
  dialogs-1:
    build:
      context: ./src
      dockerfile: dialogs.Dockerfile
    environment:
      - GIN_MODE=release
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
    volumes:
      - ./app.yaml:/app/config.yaml
    depends_on:
      haproxy:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - otus

  # Dialogs service - инстанс 2
  dialogs-2:
    build:
      context: ./src
      dockerfile: dialogs.Dockerfile
    environment:
      - GIN_MODE=release
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
    volumes:
      - ./app.yaml:/app/config.yaml
    depends_on:
      haproxy:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - otus

  # Nginx для балансировки backend и dialogs
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "8080:80"      # Main API endpoint
      - "8082:8080"    # Nginx status
    volumes:
      - ./etc/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend-1
      - backend-2
      - backend-3
      - dialogs-1
      - dialogs-2
    command: /bin/sh -c "sleep 5 && nginx -g 'daemon off;'"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://127.0.0.1/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - otus

  # Nginx Prometheus Exporter
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:1.1.0
    restart: unless-stopped
    command:
      - '-nginx.scrape-uri=http://nginx:8080/nginx_status'
    ports:
      - "9113:9113"
    depends_on:
      - nginx
    networks:
      - otus

networks:
  otus:
    driver: bridge

volumes:
  db-data-slave-1:
  db-data-slave-2:
  redis-data:
  redis-dialogs-data:
  prometheus-data:
  grafana-data:
  zabbix-postgres-data:
  zabbix-server-data:
