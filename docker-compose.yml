services:
  postgres-master:
    image: postgres:17
    restart: unless-stopped
    ports:
      - "127.0.0.1:5433:5432"
    environment:
      - POSTGRES_DB=app_db
      - POSTGRES_USER=app_user
      - POSTGRES_PASSWORD=app_password
    volumes:
      - ./db:/var/lib/postgresql/data
      - ./etc/postgresql-master-simple.conf:/etc/postgresql/postgresql.conf:ro
      - ./etc/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - ./etc/schema.sql:/docker-entrypoint-initdb.d/00_init_schema.sql
      - ./scripts/setup-replication.sh:/docker-entrypoint-initdb.d/99_setup_replication.sh
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf", "-c", "hba_file=/etc/postgresql/pg_hba.conf"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app_user -d app_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - otus

  postgres-slave-1:
    image: postgres:17
    restart: unless-stopped
    ports:
      - "127.0.0.1:5434:5432"
    environment:
      - POSTGRES_DB=app_db
      - POSTGRES_USER=app_user
      - POSTGRES_PASSWORD=app_password
    volumes:
      - db-data-slave-1:/var/lib/postgresql/data
    command: |
      bash -c "
      if [ ! -f /var/lib/postgresql/data/postgresql.conf ]; then
        echo 'Initializing replica1...'
        rm -rf /var/lib/postgresql/data/* 2>/dev/null || true
        
        PGPASSWORD=replicatorpass pg_basebackup -h postgres-master -D /var/lib/postgresql/data -U replicator -v -P -R
        echo 'application_name = replica1' >> /var/lib/postgresql/data/postgresql.auto.conf
        
        chown -R postgres:postgres /var/lib/postgresql/data
        chmod 700 /var/lib/postgresql/data
      fi
      
      exec docker-entrypoint.sh postgres
      "
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app_user -d app_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    depends_on:
      postgres-master:
        condition: service_healthy
    networks:
      - otus

  postgres-slave-2:
    image: postgres:17
    restart: unless-stopped
    ports:
      - "127.0.0.1:5435:5432"
    environment:
      - POSTGRES_DB=app_db
      - POSTGRES_USER=app_user
      - POSTGRES_PASSWORD=app_password
    volumes:
      - db-data-slave-2:/var/lib/postgresql/data
    command: |
      bash -c "
      if [ ! -f /var/lib/postgresql/data/postgresql.conf ]; then
        echo 'Initializing replica2...'
        rm -rf /var/lib/postgresql/data/* 2>/dev/null || true
        
        PGPASSWORD=replicatorpass pg_basebackup -h postgres-master -D /var/lib/postgresql/data -U replicator -v -P -R
        echo 'application_name = replica2' >> /var/lib/postgresql/data/postgresql.auto.conf
        
        chown -R postgres:postgres /var/lib/postgresql/data
        chmod 700 /var/lib/postgresql/data
      fi
      
      exec docker-entrypoint.sh postgres
      "
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app_user -d app_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    depends_on:
      postgres-master:
        condition: service_healthy
    networks:
      - otus

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - otus

  backend:
    build:
      context: ./src
      dockerfile: Dockerfile
    environment:
      - GIN_MODE=release
    volumes:
      - ./app.yaml:/app/config.yaml
    ports:
      - "8080:8080"
    depends_on:
      postgres-master:
        condition: service_healthy
      postgres-slave-1:
        condition: service_healthy
      postgres-slave-2:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - otus

networks:
  otus:
    driver: bridge

volumes:
  db-data-slave-1:
  db-data-slave-2:
  redis-data:
