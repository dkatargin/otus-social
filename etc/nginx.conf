user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'upstream: $upstream_addr status: $upstream_status '
                    'response_time: $upstream_response_time';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Backend service балансировка
    upstream backend_cluster {
        least_conn;

        server backend-1:8080 max_fails=3 fail_timeout=30s;
        server backend-2:8080 max_fails=3 fail_timeout=30s;
        server backend-3:8080 max_fails=3 fail_timeout=30s;

        keepalive 32;
    }

    # Dialogs service балансировка
    upstream dialogs_cluster {
        least_conn;

        server dialogs-1:8080 max_fails=3 fail_timeout=30s;
        server dialogs-2:8080 max_fails=3 fail_timeout=30s;

        keepalive 32;
    }

    server {
        listen 80;
        server_name _;

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Backend API
        location / {
            proxy_pass http://backend_cluster;
            proxy_http_version 1.1;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Connection "";

            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
            proxy_next_upstream_tries 2;
        }

        # Dialog service
        location /dialog/ {
            proxy_pass http://dialogs_cluster/;
            proxy_http_version 1.1;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Connection "";

            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
            proxy_next_upstream_tries 2;
        }

        # WebSocket для диалогов
        location /ws {
            proxy_pass http://dialogs_cluster;
            proxy_http_version 1.1;

            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_connect_timeout 7d;
            proxy_send_timeout 7d;
            proxy_read_timeout 7d;
        }
    }

    # Nginx status page
    server {
        listen 8080;
        server_name _;

        location /nginx_status {
            stub_status on;
            access_log off;
        }
    }
}
global
    log stdout format raw local0
    maxconn 4096
    user haproxy
    group haproxy
    daemon

defaults
    log     global
    mode    tcp
    option  tcplog
    option  dontlognull
    option  redispatch
    retries 3
    timeout connect 5000ms
    timeout client  50000ms
    timeout server  50000ms

# PostgreSQL Master (для записи)
listen postgres_master
    bind *:5432
    mode tcp
    option pgsql-check user app_user
    balance roundrobin

    server postgres-master postgres-master:5432 check inter 2000 rise 2 fall 3

# PostgreSQL Replicas (для чтения)
listen postgres_replicas
    bind *:5433
    mode tcp
    option pgsql-check user app_user
    balance roundrobin

    server postgres-slave-1 postgres-slave-1:5432 check inter 2000 rise 2 fall 3
    server postgres-slave-2 postgres-slave-2:5432 check inter 2000 rise 2 fall 3

# HAProxy Stats
listen stats
    bind *:8404
    mode http
    stats enable
    stats uri /stats
    stats refresh 5s
    stats show-legends
    stats show-node

